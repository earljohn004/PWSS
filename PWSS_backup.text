//#include <SoftwareSerial.h>
//#include </usr/share/arduino/libraries/Timer-master/Event.h>
//#include </usr/share/arduino/libraries/Sleep_n0m1-master/Sleep_n0m1.h>
#include "Timer.h"
#include "Sleep_n0m1.h"


Timer t;
//SoftwareSerial mySerial(3,4); //rx tx
/*
Liquid flow rate sensor -DIYhacking.com Arvind Sanjeev
Measure the liquid/water flow rate using this code. 
Connect Vcc and Gnd of sensor to arduino, and the signal line to arduino digital pin 2.
*/
byte statusLed    = 13;
byte sensorInterrupt = 0;  // 0 = digital pin 2
byte sensorPin       = 2;
byte rxPin	= 3;

// The hall-effect flow sensor outputs approximately 4.5 pulses per second per
// litre/minute of flow.
float calibrationFactor = 4.5;
volatile byte pulseCount;  
float flowRate;
unsigned int flowMilliLitres;
unsigned long totalMilliLitres;

unsigned long oldTime;
int eventSerial;

//Function Instance
void ISR_pulseCounter();
void waterFlow();
void test();
//void ISR_serialEvent();

void setup()
{
  // Initialize a serial connection for reporting values to the host
  Serial.begin(9600);
  //mySerial.begin(9600);
  
  // Pin for Interrupt for flow sensor 
  pinMode(sensorPin, INPUT);
  digitalWrite(sensorPin, HIGH);
  eventSerial = t.every(1000*20, waterFlow);

  pulseCount        = 0;
  flowRate          = 0.0;
  flowMilliLitres   = 0;
  totalMilliLitres  = 0;
  oldTime           = 0;
	
  //Interrut 0 at pin 2
  attachInterrupt(sensorInterrupt, ISR_pulseCounter, FALLING);

  //Interrupt 1 at pin 3
  //attachInterrupt(rxPin,ISR_serialEvent,RISING);

}

//void loop()
//{
//
//}

void loop()
{
	t.update();
}

void test()
{
   
   if((millis() - oldTime) > 1000)    // Only process counters once per second
  { 
    // Disable the interrupt while calculating flow rate and sending the value to
    // the host
    detachInterrupt(sensorInterrupt);
        
    // Because this loop may not complete in exactly 1 second intervals we calculate
    // the number of milliseconds that have passed since the last execution and use
    // that to scale the output. We also apply the calibrationFactor to scale the output
    // based on the number of pulses per second per units of measure (litres/minute in
    // this case) coming from the sensor.
    flowRate = ((1000.0 / (millis() - oldTime)) * pulseCount) / calibrationFactor;
    
    // Note the time this processing pass was executed. Note that because we've
    // disabled interrupts the millis() function won't actually be incrementing right
    // at this point, but it will still return the value it was set to just before
    // interrupts went away.
    oldTime = millis();
    
    // Divide the flow rate in litres/minute by 60 to determine how many litres have
    // passed through the sensor in this 1 second interval, then multiply by 1000 to
    // convert to millilitres.
    flowMilliLitres = (flowRate / 60) * 1000;
    
    // Add the millilitres passed in this second to the cumulative total
    totalMilliLitres += flowMilliLitres;
      
    //unsigned int frac;
    
    // Print the flow rate for this second in litres / minute
    //Serial.print("Flow rate: ");
    //Serial.print(int(flowRate));  // Print the integer part of the variable
    //Serial.print(".");             // Print the decimal point
    //// Determine the fractional part. The 10 multiplier gives us 1 decimal place.
    //frac = (flowRate - int(flowRate)) * 10;
    //Serial.print(frac, DEC) ;      // Print the fractional part of the variable
    //Serial.print("L/min");
    // Print the number of litres flowed in this second
    //Serial.print("  Current Liquid Flowing: ");             // Output separator
    //Serial.print(flowMilliLitres);
    //Serial.print("mL/Sec");

    //// Print the cumulative total of litres flowed since starting
    //Serial.print("  Output Liquid Quantity: ");             // Output separator
    //Serial.print(totalMilliLitres);
    //Serial.println("mL"); 

    //mySerial.print(totalMilliLitres);
    Serial.println(totalMilliLitres);

    // Reset the pulse counter so we can start incrementing again
    pulseCount = 0;
    
    // Enable the interrupt again now that we've finished sending output
    attachInterrupt(sensorInterrupt, ISR_pulseCounter, FALLING);
  }
}

/*
Insterrupt Service Routine
 */
void ISR_pulseCounter()
{
  // Increment the pulse counter
  pulseCount++;
}

void waterFlow()
{
    detachInterrupt(sensorInterrupt);
	  Serial.println(pulseCount);	
	  pulseCount=0;
    attachInterrupt(sensorInterrupt, ISR_pulseCounter, FALLING);
}


//void ISR_serialEvent()
//{
//	while(Serial.available())
//	{
//		//do something here
//	}
//}

//void serialEvent()
//{
//	
//}



